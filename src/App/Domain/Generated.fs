//------------------------------------------------------------------------------
//        This code was generated by myriad.
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------
namespace rec Gen


namespace rec Gen

module Race =
    open Model

    let toString (x: Race) =
        match x with
        | Human -> "Human"
        | Elf -> "Elf"
        | Dwarf -> "Dwarf"

    let fromString (x: string) =
        match x with
        | "Human" -> Some Human
        | "Elf" -> Some Elf
        | "Dwarf" -> Some Dwarf
        | _ -> None

    let toTag (x: Race) =
        match x with
        | Human -> 0
        | Elf -> 1
        | Dwarf -> 2

    let isHuman (x: Race) =
        match x with
        | Human -> true
        | _ -> false

    let isElf (x: Race) =
        match x with
        | Elf -> true
        | _ -> false

    let isDwarf (x: Race) =
        match x with
        | Dwarf -> true
        | _ -> false
namespace rec Gen

module Stats =
    open Model

    let str_ =
        Optics.lens (fun (data: Stats) -> data.str) (fun (value: int) (data: Stats) -> { data with str = value })

    let dex_ =
        Optics.lens (fun (data: Stats) -> data.dex) (fun (value: int) (data: Stats) -> { data with dex = value })

    let con_ =
        Optics.lens (fun (data: Stats) -> data.con) (fun (value: int) (data: Stats) -> { data with con = value })

    let int_ =
        Optics.lens (fun (data: Stats) -> data.int) (fun (value: int) (data: Stats) -> { data with int = value })

    let wis_ =
        Optics.lens (fun (data: Stats) -> data.wis) (fun (value: int) (data: Stats) -> { data with wis = value })

    let cha_ =
        Optics.lens (fun (data: Stats) -> data.cha) (fun (value: int) (data: Stats) -> { data with cha = value })
